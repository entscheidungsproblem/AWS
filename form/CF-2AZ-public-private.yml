AWSTemplateFormatVersion: "2010-09-09"
Description: A VPC environment in two availability zones with an NAT instance.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      first Availability Zone
    Type: String
    Default: 10.0.10.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  PublicSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the public subnet in the
      second Availability Zone
    Type: String
    Default: 10.0.20.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSubnet1CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      first Availability Zone
    Type: String
    Default: 10.0.30.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  PrivateSubnet2CIDR:
    Description: >-
      Please enter the IP range (CIDR notation) for the private subnet in the
      second Availability Zone
    Type: String
    Default: 10.0.40.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  Subnet1AZ:
    Description: Subnet 1 availability zone.
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: Availability Zone 1
  Subnet2AZ:
    Description: Subnet 2 availability zone.
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: Availability Zone 2
  AccessPort:
    Description: Open port for private and public subnets to sommunicate.
    Type: String
    Default: '22'
  Region:
    Description: What region to host the AZs instance.
    Type: String
    Default: 'us-east-1'
  NATInstanceType:
    Description: >-
      Amazon EC2 instance type for the NAT instance. This instance will be put
      on public subnet 1.
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
  NATSshAccessCidr:
    Description: IP CIDR from where you could SSH into NAT instance
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  NATKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to NAT instances.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.

Mappings:
  AWSNATAMI:
    eu-central-1:
      AMI: ami-46073a5b
    sa-east-1:
      AMI: ami-fbfa41e6
    ap-northeast-1:
      AMI: ami-03cf3903
    eu-west-1:
      AMI: ami-6975eb1e
    us-east-1:
      AMI: ami-303b1458
    us-west-1:
      AMI: ami-7da94839
    us-west-2:
      AMI: ami-69ae8259
    ap-southeast-2:
      AMI: ami-e7ee9edd
    ap-southeast-1:
      AMI: ami-b49dace6

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet1AZ
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ1)'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet2AZ
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Subnet (AZ2)'
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet1AZ
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ1)'
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref Subnet2AZ
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Subnet (AZ2)'

  NatGateway1EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC
  NatGateway2EIP:
    Type: 'AWS::EC2::EIP'
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: VPC
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NatGateway1EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet1
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - NatGateway2EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet2

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Public Routes'
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ1)'
  DefaultPrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${EnvironmentName} Private Routes (AZ2)'
  DefaultPrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NATEc2Instance1:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - VPN
      - InternetGatewayAttachment
      - PublicSubnet1
      - SecurityGroupNAT1
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref NATInstanceType
      ImageId: !FindInMap 
        - AWSNATAMI
        - !Ref 'Region'
        - AMI
      KeyName: !Ref NATKeyName
      Monitoring: 'false'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref EnvironmentName
              - NAT
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet1
          GroupSet:
            - !Ref SecurityGroupNAT1
          AssociatePublicIpAddress: 'true'

  NATEc2Instance2:
    Type: 'AWS::EC2::Instance'
    DependsOn:
      - VPN
      - InternetGatewayAttachment
      - PublicSubnet2
      - SecurityGroupNAT2
    Properties:
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref NATInstanceType
      ImageId: !FindInMap 
        - AWSNATAMI
        - !Ref 'Region'
        - AMI
      KeyName: !Ref NATKeyName
      Monitoring: 'false'
      SourceDestCheck: 'false'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref EnvironmentName
              - NAT
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref PublicSubnet2
          GroupSet:
            - !Ref SecurityGroupNAT2
          AssociatePublicIpAddress: 'true'        

  SecurityGroupPrivate1:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: 
      - VPC
      - InternetGatewayAttachment
    Properties:
      GroupDescription: Security group for NAT instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AccessPort
          ToPort: !Ref AccessPort
          CidrIp: !Ref PublicSubnet1CIDR 

      SecurityGroupEgress:
        - IpProtocol: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref EnvironmentName
              - SecurityGroupPrivate

  SecurityGroupPrivate2:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: 
      - VPC
      - InternetGatewayAttachment
    Properties:
      GroupDescription: Security group for NAT instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AccessPort
          ToPort: !Ref AccessPort
          CidrIp: !Ref PublicSubnet2CIDR 

      SecurityGroupEgress:
        - IpProtocol: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: '443'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref EnvironmentName
              - SecurityGroupPrivate

  SecurityGroupPublic1:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: 
      - VPC
      - InternetGatewayAttachment
    Properties:
      GroupDescription: Security group for NAT instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref NATSshAccessCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref AccessPort
          ToPort: !Ref AccessPort
          CidrIp: !Ref PrivateSubnet1CIDR  
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref EnvironmentName
              - SecurityGroupPublic1

  SecurityGroupPublic2:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: 
      - VPC
      - InternetGatewayAttachment
    Properties:
      GroupDescription: Security group for NAT instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref NATSshAccessCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !Ref AccessPort
          ToPort: !Ref AccessPort
          CidrIp: !Ref PrivateSubnet2CIDR  
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref EnvironmentName
              - SecurityGroupPublic2
